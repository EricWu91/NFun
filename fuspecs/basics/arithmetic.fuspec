|****************************************
| TEST unsigned chain convert  
| TAGS convert                          
|************************ 
| out u16: uint16 
|-----------------------
  x:uint8

  u16:uint16 = x
  u32:uint32 = u16
  u64:uint64 = u32
  r:real  = u64
|---------------------
| set x:2
| check  u16:2, u32:2, u64:2, r:2
| set x:0
| check  u16:0, u32:0, u64:0, r:0

|****************************************
| TEST signed chain convert  
| TAGS convert                          
|************************  
  x:int16

  i16:int16 = x
  i32:int32 = i16
  i64:int64 = i32
  r:real  = i64
|---------------------
| set x:2
| check  i16:2, i32:2, i64:2, r:2
| set x:0
| check  i16:0, i32:0, i64:0, r:0
| set x:-2
| check  i16:-2, i32:-2, i64:-2, r:-2
| set x:-42
| check  i16:-42, i32:-42, i64:-42, r:-42



|****************************************
| TEST change sign chain convert 
| TAGS convert                          
|************************  
  x:int16

  i16:int16 = -x
  i32:int32 = -i16
  i64:int64 = -i32
  r:real  = -i64
|---------------------
| set x:2
| check  i16:-2, i32:2, i64:-2, r:2
| set x:0
| check  i16:0, i32:0, i64:0, r:0
| set x:-2
| check  i16:2, i32:-2, i64:2, r:-2
| set x:-42
| check  i16:42, i32:-42, i64:42, r:-42





|****************************************
| TEST apply numeric constant  
| TAGS int real constant apply                         
|************************  
| out i1:int,i2:int, r1:real, r2:real 
|------------------------
  i1:int = 1
  i2:int = -1
  r1:real = 1.0
  r2:real = 2
|---------------------
| check i1:1, i2:-1, r1:1, r2: 2,        



|****************************************
| TEST apply int constant arithmetic
| TAGS int  constant apply arithmetic                        
|************************  
| out i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int, i8:int, i9:int,i10:int,i11:int,i12:int
|------------------------
  i1:int =  1 + 100
  i2:int = -1 + 100
  i3:int =  1 - 100
  i4:int = -1 - 100

  i5:int =  1 * 100
  i6:int = -1 * 100
  i7:int =  1 *-100
  i8:int = -1 *-100

  i9:int =  13  .remainder(4)
  i10:int = -13 .remainder(4)
  i11:int =  13 .remainder(-100)
  i12:int = -13 .remainder(-100)
|---------------------
| check i1:101,  i2:99,  i3:-99, i4:-101, i5:100,i6:-100, i7:-100,  i8:100, i9:1,    i10:3, i11:13 ,  i12:13,



|****************************************
| TEST real constant arithmetic with upcast
| TAGS real constant arithmetic upcast                        
|************************  
| out r1:real, r2:real, r3:real, r4:real, r5:real, r6:real, r7:real, r8:real, r9:real,r10:real,r11:real,r12:real, r13:real,r14:real,r15:real,r16:real, r17:real,r18:real,r19:real,r20:real
|------------------------
  r1:real =  1.1 + 100.2
  r2:real = -1.3 + 100
  r3:real =  1.5 - 100.6
  r4:real = -1 - 100.8

  r5:real =  1.1 * 100
  r6:real = -1 * 100.05
  r7:real =  1.05 *-100
  r8:real = -1.1 *-100.5

  r9:real =  13.6  .remainder(4.7)
  r10:real = -13.8.remainder( 4.9)
  r11:real =  13.11.remainder( -100.12)
  r12:real = -13.13.remainder( -100.14)

  r13:real =  12 / 4
  r14:real =  10 / -10 
  r15:real =  0/ 0.55 
  r16:real =  -0.3 /0.3

  r17:real =  2 ** 5
  r18:real =  10 ** -1 
  r19:real =  -1.5 ** 2 
  r20:real =  5.2 ** 3.1 
|---------------------
| check r1:101.3, r2:98.7, r3:-99.1, r4:-101.8, r5:101.1, r6:-100.05, r7:-105, r8:110.55, r9:4.2, r10:-4, r11:13.102,  r12:13.13, r13:3   ,     r14:-1  , r15:0   ,  r16:-1  , r17:32  ,     r18:0.1 , r19:2.25,  r20:-230.57437175697558,




|****************************************
| TEST apply real constant arithmetic with upcast
| TAGS real constant apply arithmetic upcast                        
|************************  
| out i1:real, i2:real, i3:real, i4:real, i5:real, i6:real, i7:real, i8:real, i9:real,i10:real,i11:real,i12:real
|------------------------
  i1:real =  1 + 100
  i2:real = -1 + 100
  i3:real =  1 - 100
  i4:real = -1 - 100

  i5:real =  1 * 100
  i6:real = -1 * 100
  i7:real =  1 *-100
  i8:real = -1 *-100

  i9:real =  13.remainder( 4)
  i10:real = -13.remainder( 4)
  i11:real =  13.remainder( -100)
  i12:real = -13.remainder( -100)
|---------------------
| check i1:101,  i2:99,  i3:-99, i4:-101, i5:100,i6:-100, i7:-100,  i8:100, i9:1,    i10:3, i11:13 ,  i12:13,




|****************************************
| TEST int constant arithmetic 
| TAGS int constant arithmetic                         
|************************
| in x:int        
| out plus:int, minus:int, multi:int, rema:int           
|------------------------
  x:int
  plus :int = x+1
  minus:int =x-1
  multi:int =x*100
  rema :int =x.remainder(10)
|---------------------
| set x:1,         
| check plus:2, minus:0, multi:100, rema:1     
| set x:-20,          
| check plus:-19, minus:-21, multi:-2000, rema:0


|****************************************
| TEST real constant arithmetic 
| TAGS real constant arithmetic                         
|************************
| in x:real        
| out plus:real, minus:real, multi:real, divide:real, pow:real           
|------------------------
  x:real
  plus :real = x+1
  minus:real = x-1
  multi:real = x*100
  divide:real = x/10
  rema:real   = x.remainder(10)
  pow:real    = x**2
|---------------------
| set x:1,         
| check plus:2, minus:0, multi:100, divide:0.1, pow:1, rema:1  
       
| set x:-20,          
| check plus:-19, minus:-21, multi:-2000, divide:-2, pow:-8000, rema:0



|****************************************
| TEST int to real upcast 
| TAGS int real constant upcast                         
|************************
| in  x:int        
|------------------------
  x:int
  p1 :real = x+1
  p2 :real = x+1.0
  p3 :real = x+x
  m1 :real = x*1
  m2 :real = x*1.0
  m3 :real = x*x
  r1 :real = x.remainder(1)
  r2 :real = x.remainder(1.0)
  r3 :real = x.remainder(x)
|---------------------
| set x:1,         
| check p1:1.0, p2:1.0, p3:2.0, m1:1.0, m2:1.0, m3:1.0, r1:0.0, r2:0.0, r3:0.0
 
| set x:-20,          
| check p1:-19, p2:-19, p3:-1,	m1:-20, m2:-20, m3:400, r1:0.0, r2:0.0, r3:0.0 


|****************************************
| TEST priorities numeric constant  
| TAGS priority arithmetics constant                         
|************************  
| out i1:int,i2:int, r1:real, r2:real 
|------------------------
  i1:int = -1-3*2
  i2:int = (-1-3)*2
  r1:real = -1.0-3*2
  r2:real = (-1-3)*2
|---------------------
| check i1:-7, i2:-8, r1:-7, r2:-8,        






|****************************************
| TODO sign convert chain arithmetic   
| TAGS convert                          
|************************  
  x:int16

  i16:int16 = (2*x-1)*2
  i32:int32 = (2*x-i16)+1
  i64:int64 = (2*i16-i32)-1
  r:real    = (2*i32-i64)*1
|---------------------
| set x:2
| check  i16:6, i32:-1, i64:12, r:10
| set x:0
| check  i16:-2, i32:3, i64:-8, r:14
| set x:-2
| check  i16:-10, i32:7, i64:-28, r:14


|****************************************
| TODO integers multiply user function  
| TAGS integers convert function                          
|************************  
| out i16:int16, i32:int32, i64:int64, u8:uint8, u16:uint16, u32: uint32, u64:uint64 
|------------------------
  i16Inc(i:int16) :int16 = i*2
  i32Inc(i:int32) :int32 = i*2
  i64Inc(i:int64) :int64 = i*2
  u8Inc (i:uint8) :uint8 = i*2
  u16Inc(i:uint16):uint16 = i*2
  u32Inc(i:uint32):uint32 = i*2
  u64Inc(i:uint64):uint64 = i*2
    
  x:uint8

  i16 = i16Inc(x)
  i32 = i32Inc(x)
  i64 = i64Inc(x)

  u8  = u8Inc (x)
  u16 = u16Inc(x)
  u32 = u32Inc(x)
  u64 = u64Inc(x)
  
|---------------------
| set x:2
| check i16:4, i32:4, i64:4, u8:4, u16:4, u32:4, u64:4
| set x:42
| check i16:84, i32:84, i64:84, u8:84, u16:84, u32:84, u64:84
| set x:0
| check i16:0, i32:0, i64:0, u8:0, u16:0, u32:0, u64:0





|****************************************
| TODO unsigned integers decrement user function  
| TAGS integers convert function                          
|************************  
| out ui16:uint16, ui32:uint32, ui64:uint64
|------------------------
  ui16Inc(i:uint16) :uint16 = i-1
  ui32Inc(i:uint32) :uint32 = i-1
  ui64Inc(i:int64)  :uint64 = i-1
    
  x:uint8

  ui16 = ui16Inc(x)
  ui32 = ui32Inc(x)
  ui64 = ui64Inc(x)

|---------------------
| set x:2
| check ui16:1, ui32:1, ui64:1
| set x:1
| check ui16:0, ui32:0, ui64:0



|****************************************
| TODO unsigned chain convert decrement user function  
| TAGS integers convert function                          
|************************  
| out ui16:uint16, ui32:uint32, ui64:uint64
|------------------------
  ui16Inc(i:uint16) :uint16 = i-1
  ui32Inc(i:uint32) :uint32 = i-1
  ui64Inc(i:int64)  :uint64 = i-1
    
  x:uint8

  ui16 = ui16Inc(x)
  ui32 = ui32Inc(ui32)
  ui64 = ui64Inc(ui64)
|---------------------
| set x:5
| check ui16:4, ui32:3, ui64:2
| set x:3
| check ui16:2, ui32:1, ui64:0





|****************************************
| TODO integers decrement user function  
| TAGS integers convert function                          
|************************  
| out i16:int16, i32:int32, i64:int64, u8:uint8, u16:uint16, u32: uint32, u64:uint64 
|------------------------
  i16Inc(i:int16) :int16 = i-1
  i32Inc(i:int32) :int32 = i-1
  i64Inc(i:int64) :int64 = i-1
  u8Inc (i:uint8) :uint8 = i-1
  u16Inc(i:uint16):uint16 = i-1
  u32Inc(i:uint32):uint32 = i-1
  u64Inc(i:uint64):uint64 = i-1
    
  x:uint8

  i16 = i16Inc(x)
  i32 = i32Inc(x)
  i64 = i64Inc(x)

  u8  = u8Inc (x)
  u16 = u16Inc(x)
  u32 = u32Inc(x)
  u64 = u64Inc(x)  
|---------------------
| set x:2
| check i16:1, i32:1, i64:1, u8:1, u16:1, u32:1, u64:1
| set x:42
| check i16:41, i32:41, i64:41, u8:41, u16:41, u32:41, u64:41



|****************************************
| TODO signed integers decrement user function  
| TAGS integers convert function                          
|************************  
| out i16:int16, i32:int32, i64:int64
|------------------------
  i16Inc(i:int16) :int16 = i-1
  i32Inc(i:int32) :int32 = i-1
  i64Inc(i:int64) :int64 = i-1
    
  x:int16

  i16 = i16Inc(x)
  i32 = i32Inc(x)
  i64 = i64Inc(x)

|---------------------
| set x:0
| check i16:-1, i32:-1, i64:-1
| set x:-1
| check i16:-2, i32:-2, i64:-2







|****************************************
| TODO integers increment user function  
| TAGS integers convert function                          
|*****************************  
| out i16:int16, i32:int32, i64:int64, u8:uint8, u16:uint16, u32:uint32, u64:uint64 
|------------------------
  i16Inc(i:int16) :int16 = i+1
  i32Inc(i:int32) :int32 = i+1
  i64Inc(i:int64) :int64 = i+1
  u8Inc (i:uint8) :uint8 = i+1
  u16Inc(i:uint16):uint16 = i+1
  u32Inc(i:uint32):uint32 = i+1
  u64Inc(i:uint64):uint64 = i+1
    
  x:uint8

  i16 = i16Inc(x)
  i32 = i32Inc(x)
  i64 = i64Inc(x)

  u8  = u8Inc (x)
  u16 = u16Inc(x)
  u32 = u32Inc(x)
  u64 = u64Inc(x)
  
|---------------------
| set x:2
| check i16:3, i32:3, i64:3, u8:3, u16:3, u32:3, u64:3
| set x:42
| check i16:43, i32:43, i64:43, u8:43, u16:43, u32:43, u64:43
| set x:0
| check i16:1, i32:1, i64:1, u8:1, u16:1, u32:1, u64:1


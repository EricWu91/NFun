
|****************************************
| TEST integers increment user function  
| TAGS integers convert function                          
|************************  
| out i16:int16, i32:int32, i64:int64, u8:uint8, u16:uint16, u32: uin32, u64:uint64 
|------------------------
  i16Inc(i:int16) :int16 = i+1
  i32Inc(i:int32) :int32 = i+1
  i64Inc(i:int64) :int64 = i+1
  u8Inc (i:uint8) :uint8 = i+1
  u16Inc(i:uint16):uint16 = i+1
  u32Inc(i:uint32):uint32 = i+1
  u64Inc(i:uint64):uint64 = i+1
    
  x:uint8

  i16 = i16Inc(x)
  i32 = i32Inc(x)
  i64 = i64Inc(x)

  u8  = u8Inc (x)
  u16 = u16Inc(x)
  u32 = u32Inc(x)
  u64 = u64Inc(x)
  
|---------------------
| set x:2
| check i16:3, i32:3, i64:3, u8:3, u16:3, u32:3, u64:3
| set x:42
| check i16:43, i32:43, i64:43, u8:43, u16:43, u32:43, u64:43
| set x:0
| check i16:1, i32:1, i64:1, u8:1, u16:1, u32:1, u64:1


|****************************************
| TEST integers decrement user function  
| TAGS integers convert function                          
|************************  
| out i16:int16, i32:int32, i64:int64, u8:uint8, u16:uint16, u32: uin32, u64:uint64 
|------------------------
  i16Inc(i:int16) :int16 = i-1
  i32Inc(i:int32) :int32 = i-1
  i64Inc(i:int64) :int64 = i-1
  u8Inc (i:uint8) :uint8 = i-1
  u16Inc(i:uint16):uint16 = i-1
  u32Inc(i:uint32):uint32 = i-1
  u64Inc(i:uint64):uint64 = i-1
    
  x:uint8

  i16 = i16Inc(x)
  i32 = i32Inc(x)
  i64 = i64Inc(x)

  u8  = u8Inc (x)
  u16 = u16Inc(x)
  u32 = u32Inc(x)
  u64 = u64Inc(x)  
|---------------------
| set x:2
| check i16:1, i32:1, i64:1, u8:1, u16:1, u32:1, u64:1
| set x:42
| check i16:41, i32:41, i64:41, u8:41, u16:41, u32:41, u64:41



|****************************************
| TEST signed integers decrement user function  
| TAGS integers convert function                          
|************************  
| out i16:int16, i32:int32, i64:int64
|------------------------
  i16Inc(i:int16) :int16 = i-1
  i32Inc(i:int32) :int32 = i-1
  i64Inc(i:int64) :int64 = i-1
    
  x:int16

  i16 = i16Inc(x)
  i32 = i32Inc(x)
  i64 = i64Inc(x)

|---------------------
| set x:0
| check i16:-1, i32:-1, i64:-1
| set x:-1
| check i16:-2, i32:-2, i64:-2



|****************************************
| TEST unsigned integers decrement user function  
| TAGS integers convert function                          
|************************  
| out ui16:uint16, ui32:uint32, ui64:uint64
|------------------------
  ui16Inc(i:uint16) :uint16 = i-1
  ui32Inc(i:uint32) :uint32 = i-1
  ui64Inc(i:int64)  :uint64 = i-1
    
  x:uint8

  ui16 = ui16Inc(x)
  ui32 = ui32Inc(x)
  ui64 = ui64Inc(x)

|---------------------
| set x:2
| check ui16:1, ui32:1, ui64:1
| set x:1
| check ui16:0, ui32:0, ui64:0



|****************************************
| TEST unsigned chain convert decrement user function  
| TAGS integers convert function                          
|************************  
| out ui16:uint16, ui32:uint32, ui64:uint64
|------------------------
  ui16Inc(i:uint16) :uint16 = i-1
  ui32Inc(i:uint32) :uint32 = i-1
  ui64Inc(i:int64)  :uint64 = i-1
    
  x:uint8

  ui16 = ui16Inc(x)
  ui32 = ui32Inc(ui32)
  ui64 = ui64Inc(ui64)
|---------------------
| set x:5
| check ui16:4, ui32:3, ui64:2
| set x:3
| check ui16:2, ui32:1, ui64:0



|****************************************
| TEST integers multiply user function  
| TAGS integers convert function                          
|************************  
| out i16:int16, i32:int32, i64:int64, u8:uint8, u16:uint16, u32: uin32, u64:uint64 
|------------------------
  i16Inc(i:int16) :int16 = i*2
  i32Inc(i:int32) :int32 = i*2
  i64Inc(i:int64) :int64 = i*2
  u8Inc (i:uint8) :uint8 = i*2
  u16Inc(i:uint16):uint16 = i*2
  u32Inc(i:uint32):uint32 = i*2
  u64Inc(i:uint64):uint64 = i*2
    
  x:uint8

  i16 = i16Inc(x)
  i32 = i32Inc(x)
  i64 = i64Inc(x)

  u8  = u8Inc (x)
  u16 = u16Inc(x)
  u32 = u32Inc(x)
  u64 = u64Inc(x)
  
|---------------------
| set x:2
| check i16:4, i32:4, i64:4, u8:4, u16:4, u32:4, u64:4
| set x:42
| check i16:84, i32:84, i64:84, u8:84, u16:84, u32:84, u64:84
| set x:0
| check i16:0, i32:0, i64:0, u8:0, u16:0, u32:0, u64:0



|****************************************
| TEST unsigned chain convert  
| TAGS convert                          
|************************  
  x:uint8

  u16:uint16 = x
  u32:uint32 = u16
  u64:uint64 = u32
  r:real  = u64
|---------------------
| set x:2
| check  u16:2, u32:2, u64:2, r:2
| set x:0
| check  u16:0, u32:0, u64:0, r:0

|****************************************
| TEST signed chain convert  
| TAGS convert                          
|************************  
  x:int16

  i16:int16 = x
  i32:int32 = i16
  i64:int64 = i32
  r:real  = i64
|---------------------
| set x:2
| check  i16:2, i32:2, i64:2, r:2
| set x:0
| check  i16:0, i32:0, i64:0, r:0
| set x:-2
| check  i16:-2, i32:-2, i64:-2, r:-2
| set x:-42
| check  i16:-42, i32:-42, i64:-42, r:-42



|****************************************
| TEST change sign chain convert 
| TAGS convert                          
|************************  
  x:int16

  i16:int16 = -x
  i32:int32 = -i16
  i64:int64 = -i32
  r:real  = -i64
|---------------------
| set x:2
| check  i16:-2, i32:2, i64:-2, r:2
| set x:0
| check  i16:0, i32:0, i64:0, r:0
| set x:-2
| check  i16:2, i32:-2, i64:2, r:-2
| set x:-42
| check  i16:42, i32:-42, i64:42, r:-42



|****************************************
| TEST sign convert chain arithmetic   
| TAGS convert                          
|************************  
  x:int16

  i16:int16 = (2*x-1)*2
  i32:int32 = (2*x-i16)+1
  i64:int64 = (2*i16-i32)-1
  r:real    = (2*i32-i64)*1
|---------------------
| set x:2
| check  i16:6, i32:-1, i64:12, r:10
| set x:0
| check  i16:-2, i32:3, i64:-8, r:14
| set x:-2
| check  i16:-10, i32:7, i64:-28, r:14
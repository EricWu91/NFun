
|****************************************
| TEST req factorial
| TAGS req user-function
|************************  
| in  n:int
| out  out:int 
|------------------------
  fact(n) = if (n<2) n
  		    else fact(n-1)*n

  fact(n)
|---------------------
| set n:0
| check out:0
| set n:1
| check out:1
| set n:4
| check out: 24



|****************************************
| TEST req factorial in array
| TAGS req user-function
|************************  
| out  out:int 
|------------------------
  fact(n) = if (n==0) 0
  			if (n==1) 1 
  			else fact(n-1)*n

  [0..4].map(fact)
|---------------------
| check out:[0,1,2,6,24]



|****************************************
| TEST req simple fibonacci 
| TAGS req user-function
|************************  
| in  n:int[]
| out  res:int[] 
|------------------------
 fib(n) = 
        if (n==0) 0
        if (n<=2) 1
        else fib(n-1)+fib(n-2) 
        
 res = n.map(fib)
|---------------------
| set     n:[0, 1, 2, 3, 4, 5, 6, 7,   8,  9]
| check res:[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]



|****************************************
| TEST req print numbers
| TAGS req user-function
|************************  
| in   n:int
| out  out:text 
|------------------------
  #interpolation: '{f(n-1)}, {n}'
  
  f(n) = if(n<=0) n.toText()
         else [f(n-1),', ',n.toText()].flat()  

  [0..n].map(f)
|---------------------
| set n:0
| check out: '0'
| set n:1
| check out: '1'
| set n:2
| check out: '1,2'
| set n:3
| check out: '1,2,3'
| set n:7
| check out: '1,2,3,4,5,6,7'



|****************************************
| TEST req akkerman TODO
| TAGS req user-function TODO
|************************  
| in   m:int, n:int
| out  out:text 
|------------------------
#todo - find results
  akk(m,n) = 
        if(m==0) n+1
        if(n==0 and m>0) akk(m-1,1)
        else akk(m-1, akk(m,n-1))    
        
|---------------------
| set m:3, n:2



|****************************************
| TEST req isPow
| TAGS req user-function
|************************  
| in   x:real[]
| out  y:bool[]
|------------------------
  isPowOf2(n) = 
        if(n==1)         true
        if(n>1 and n<2 ) false
        else isPowOf2(n/2)

  y = x.map(isPowOf2)          
        
|---------------------
| set x:[1,2,3,4,5,6,7,8,9]
| check y:[true,true,false,true,false,false,false,true,false]


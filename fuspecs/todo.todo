





|****************************************
| TEST int join
| TAGS text array join
|************************
  
  origin:int[]
  origin.join(', ') 
  
|------------------
| set origin:[1,2,3,4,5]
| check out:'1, 2, 3, 4, 5'
| set origin:[3,2]
| check out:'3, 2'


|****************************************
| TEST text join
| TAGS text array join
|************************
  origin:text
  origin.join(', ') 
|------------------
| set origin:['','a','b']
| check out:', a, b'




|****************************************
| TEST int join split
| TAGS int join split
|************************
  origin.split(42).join(2) 
|------------------
| set origin: [1,42,42,2,3,42]
| check out:[1,2,2,3]




|****************************************
| TEST integers increment user function  
| TAGS integers convert function                          
|*****************************  
| out i16:int16, i32:int32, i64:int64, u8:uint8, u16:uint16, u32:uint32, u64:uint64 
|------------------------
  i16Inc(i:int16) :int16 = i+1
  i32Inc(i:int32) :int32 = i+1
  i64Inc(i:int64) :int64 = i+1
  u8Inc (i:uint8) :uint8 = i+1
  u16Inc(i:uint16):uint16 = i+1
  u32Inc(i:uint32):uint32 = i+1
  u64Inc(i:uint64):uint64 = i+1
    
  x:uint8

  i16 = i16Inc(x)
  i32 = i32Inc(x)
  i64 = i64Inc(x)

  u8  = u8Inc (x)
  u16 = u16Inc(x)
  u32 = u32Inc(x)
  u64 = u64Inc(x)
  
|---------------------
| set x:2
| check i16:3, i32:3, i64:3, u8:3, u16:3, u32:3, u64:3
| set x:42
| check i16:43, i32:43, i64:43, u8:43, u16:43, u32:43, u64:43
| set x:0
| check i16:1, i32:1, i64:1, u8:1, u16:1, u32:1, u64:1



|****************************************
| TEST odds   
| TAGS built-in-function
|************************  
| in x:int[]
| out  ysum:int, ymulti: int, ymin: int, ymax:int 
|------------------------
  ysum = x.filter(i->i.remainder(2)==0).sum()
  ymulti = x.filter(i->i.remainder(2)).reduce((s,i)-> s*i)
  ymin = x.filter(i->i.remainder(2)).reduce(min)
  ymax = x.filter(i->i.remainder(2)).reduce(max)
|---------------------
| set  x:[0,1,2,3,4,5,6,7,8,9]
| check ysum:20, ymulti:384, ymin:0, ymax:8




|****************************************
| TEST apply array constant  
| TAGS apply array constant                         
|************************  
	i16:int16[] = [1,2,3]     
	i32:int32[] = [1,2,3]     
	i64:int64[] = [1,2,3]     
	
	u8:uint8[]   = [1,2,3]     
	u16:uint16[] = [1,2,3]     
	u32:uint32[] = [1,2,3]    
	u64:uint64[] = [1,2,3]    
	
	ri:real[] = [1,2,3]    
	r:real[] = [1.0,2.0,3.0]    
	t:text[] = ['a1','a2','a3']    
	b:bool[] = [true,true, false]	
|---------------------
| check i16:[1,2,3], i32:[1,2,3], i64:[1,2,3], u8:[1,2,3], u16:[1,2,3], u32:[1,2,3], u64:[1,2,3], ri:[1.0,2.0,3.0], r:[1.0,2.0,3.0], t:['a1','a2','a3'], b:[true,true,false]












|****************************************
| TEST toposort  
| TAGS user-function array reqursion lambda                         
|************************  

#Graph:
#    10--11-------12--------13 
#    /     \     /            \
#1--2--3---4---5---6---7---8---9      
#       \                       \
#        14--15-----------------16---17 

mutable a:int[]

#graph edges from-[to]
graph = [[1],[2],[3,10],[4,14],[5],[6,12],[7],[8],[9],[16],[11],[4,12],[13],[9],[15],[16],[17]]

#expected sort order
order = [1,2,3,10,11,4,5,6,7,8,12,13,9,14,15,16,17]

dfs(graph, , i) 
	=  



dfs(graph) = dfs(graph, graph.count().repeat(false),0) 


##foreach (it:10, cur: [1..10], i:i+1)  
##  -> if (it> cur) it else cur 
##
##foreach it,cur: [1..10] -> if (it> cur) it else cur 
##
##for it:10, cur: [1..10] -> if (it> cur) it else cur 
##for (it:10, cur: [1..10],  -> if (it> cur) it else cur 
##
##[1..10].fold:  
##       (cur,acc) -> if (cur>acc) cur else acc
##    
##[1..10].foreach from 10: 
##       (cur,acc) -> if (cur>acc) cur else acc
##
##
##[1..10].fold 
##    (cur,acc) -> if (cur>acc) cur else acc
##
##[1..10].map -> it*10
##
##[1..10].filter -> it.isGross() and it.age>15
##       .map    -> '{it.name}'s age is {it.age}'
##       .fold (acc, cur) = acc+cur
##[1..10].filter -> it>=2
         .map -> it*10

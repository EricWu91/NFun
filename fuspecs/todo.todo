|****************************************
| TEST toposort  
| TAGS user-function array reqursion lambda                         
|************************  

#Graph:
#    10--11-------12--------13 
#    /     \     /            \
#1--2--3---4---5---6---7---8---9      
#       \                       \
#        14--15-----------------16---17 

mutable a:int[]

#graph edges from-[to]
graph = [[1],[2],[3,10],[4,14],[5],[6,12],[7],[8],[9],[16],[11],[4,12],[13],[9],[15],[16],[17]]

#expected sort order
order = [1,2,3,10,11,4,5,6,7,8,12,13,9,14,15,16,17]

dfs(graph, , i) 
	=  



dfs(graph) = dfs(graph, graph.count().repeat(false),0) 


##foreach (it:10, cur: [1..10], i:i+1)  
##  -> if (it> cur) it else cur 
##
##foreach it,cur: [1..10] -> if (it> cur) it else cur 
##
##for it:10, cur: [1..10] -> if (it> cur) it else cur 
##for (it:10, cur: [1..10],  -> if (it> cur) it else cur 
##
##[1..10].fold:  
##       (cur,acc) -> if (cur>acc) cur else acc
##    
##[1..10].foreach from 10: 
##       (cur,acc) -> if (cur>acc) cur else acc
##
##
##[1..10].fold 
##    (cur,acc) -> if (cur>acc) cur else acc
##
##[1..10].map -> it*10
##
##[1..10].filter -> it.isGross() and it.age>15
##       .map    -> '{it.name}'s age is {it.age}'
##       .fold (acc, cur) = acc+cur
##[1..10].filter -> it>=2
         .map -> it*10

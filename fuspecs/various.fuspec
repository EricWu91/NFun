|****************************************
| TEST Quadratic equation   
| TAGS arithmetic
|************************  
| in   a:real, b:real, c:real
| out  d:real, res:real[] 
|------------------------
  d = b**2-4*a*c

  res = if (d>0) [(-b+ d**0.5)/2*a, (-b- d**0.5) /2*a]
  	    if (d==0) [-b/2*a]
  	    else []
|---------------------
| set a:1, b:-8, c:12
| check res:[4,6]
| set a:5, b:3, c:7
| check res:[]
| set a:1, b:-6, c:9
| check res: [3]



|****************************************
| TEST Quadratic equation as a function
| TAGS arithmetic user-function
|************************  
| in   a:real, b:real, c:real
| out  out:real[] 
|------------------------
  d(a,b,c) = b**2-4*a*c

  quadprime(a,b,c,d) = 
  		if (d>0)  [(-b+ d**0.5)/2*a, (-b- d**0.5)/2*a]
  	    if (d==0) [-b/2*a]
  	    else []

  quad(a,b,c) = quadprime(a,b,c,d(a,b,c))

  quad(a,b,c)
|---------------------
| set a:1, b:-8, c:12
| check out:[4,6]
| set a:5, b:3, c:7
| check out:[]
| set a:1, b:-6, c:9
| check out: [3]



|****************************************
| TEST swap
| TAGS arrays user-function
|************************  
| in  input:real[], i:int, j:int
| out  res:real[] 
|------------------------
  #set two values to array
  twiceSet(arr,i,j,ival,jval)
  	= arr.set(i,ival).set(j,jval)

  #swap two values in array
  swap(arr, i, j) 
    = arr.twiceSet(i,j,arr[j], arr[i])

  res:real[] = input.swap(i,j)
|---------------------
| set input:[1,2,3,4,5], i:2, j:3
| check res:[1,2,4,3,5]



|****************************************
| TEST bubble sort
| TAGS arrays
|************************  
  twiceSet(arr,i,j,ival,jval)
  	= arr.set(i,ival).set(j,jval)

  swap(arr, i, j) 
    = arr.twiceSet(i,j,arr[j], arr[i])
  
  swapIfNotSorted(arr, i)
  	=	if   (c[i]<c[i+1]) c
  		else c.swap(i, i+1)

  # run thru array 
  # and swap every unsorted values
  onelineSort(input) =  
  	[0..input.count()-1].reduce(input, swapIfNotSorted)		

  bubbleSort(input)=
  	[0..input.count()-1]
  		.reduce(
  			input, 
  			(c,i)-> c.onelineSort())

  ini:int[]
  i:int[]  = ini.bubbleSort()
|---------------------
| set ini:[5,2,3,7,3,4,7]
| check i:[2,3,3,4,5,7,7]
| set ini:[24,52,31,55,0,55,55]
| check i:[0,24,31,52,55,55,55]



|****************************************
| TEST custom foreachi
| TAGS arrays user-function
|************************  
| in    t:int[]
| out res:int
|--------------------- 
 foreachi(arr, f) = [1..arr.count()-1].reduce(arr[0], f)

 res:int =  t.foreachi((acc,i)-> if (acc>t[i]) acc else t[i] )
|---------------------
| set t:[5,2,3,7,3,4,7]
| check res:7
| set t:[11,100,3]
| check res:100


|****************************************
| TEST custom foreachi with custom hi-order
| TAGS arrays user-function hi-order
|************************  
| in    t:int[]
| out res:int
|---------------------
 foreachi(init, f)
    = [0..init.count()-1].reduce(init, f)

 arrmax(acc,i)= if (acc>t[i]) acc else t[i]
 
 res:int =  t.foreachi(arrmax)
|---------------------
| set t:[5,2,3,7,3,4,7]
| check res:7
| set t:[11,100,3]
| check res:100



|****************************************
| TEST fold fibonacci 
| TAGS user-function
|************************  
| in   n:int[]
| out  res:real[] 
|------------------------
 fib(n) = 
 	if(n==0) 0
 	if(n==1) 1
    else
        [2..n].reduce([0,1], 
    		(acc,i)->[acc[1], acc[i-1]+acc[i-2]])[1]

 res = n.map(fib)
|---------------------
| set     n:[0, 1, 2, 3, 4, 5, 6, 7,   8,  9]
| check res:[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]



|****************************************
| TEST Golden ratio 
| TAGS user-function
|************************  
| in   n:int[]
| out  res:int[] 
|------------------------
 fibvals(n) = 
 	if(n<=1) [0,1]
    else
    	[2..n].reduce([0,1], (acc,i) -> [acc.last(), acc[i-1]+acc[i-2]])

 div(arr) = arr[1]/arr[2]

 goldenRatio(n) = div(fibvals(n)) 

 res = (goldenRatio(i) - 1.61803398875).abs() < 0.001
|---------------------
| set     i:100
| check res:true



|****************************************
| TEST Each second real 
| TAGS user-function toReal anything isReal
|************************  
| in   n:int[]
| out  res:int[] 
|------------------------
 smth: anything[]
 	= [1,'2',3.0,4,5.2, true, false, 7.2]

 res = smth
 		.filter(x->x.isReal())
 		.map(x->x.toReal())[::2]
|---------------------
| check res:[5.2,7.2]



|****************************************
| TEST increment with upper bound 
|************************  
| in   x:real
| out  done:bool, newCount:real 
|------------------------
done = x>=1000	
newCount = if (not done) x+1 else x
|---------------------
| set x:100
| check done:false, newCount:101
| set x:999
| check done:false, newCount:1000
| set x:1000
| check done:true, newCount:1000


  
|****************************************
| TEST fun odds
| TAGS built-in-function
|************************  
| in x:real[]
| out  ysum:real, ymulti: real, ymin: real, ymax:real 
|------------------------
  getOdds(x)= x.filter(i->i%2==0)
  mymax(x,y) = if (x>y) x else y

  ysum   = x.getOdds().sum()
  ymulti = x.getOdds().reduce((s,i)-> s*i)
  ymin   = x.getOdds().reduce(min)
  ymax   = x.getOdds().reduce(mymax)
|---------------------
| set x:[0,1,2,3,4,5,6,7,8,9]
| check ysum:20, ymulti:384, ymin:0, ymax:8



|****************************************
| TEST transpond  
| TAGS user-function array                         
|************************  
  transpon(x) = [0..x[0].count()-1]
                .map(  col-> x.map(row->row[col])  )

  orig1 = 
       [[1,2,3],
        [4,5,6],
        [7,8,9]]
  
  passed1 = transpon(orig) == 
       [[1,4,7],
        [2,5,8],
        [3,6,9]]

 orig2 =  ['masha', 'katja']
 
 passed2 = transpon(orig2) == ['mk','aa','st','hj','aa']       
|---------------------
| check passed1: true, passed2:true 



|****************************************
| TEST array item multiplication  
| TAGS user-function array                         
|************************  
  multi(a,b) = 
      if(a.count()!=b.count()) []
      else
          [0..a.count()-1].map(i->a[i]*b[i])  

  a =  [1,2,3]
  b =  [4,5,6]
  expected = [4,10,18]     
  
  passed = a.multi(b)==expected
|---------------------
| check passed: true 



|****************************************
| TEST array matrix multiplication  
| TAGS user-function array                         
|************************  
  multi(a,b) = a.map(ai-> b.map(bi->ai*bi))  

  a =  [1,2,3]
  b =  [4,5,6]

  expected = [
              [04,05,06],
              [08,10,12],
              [12,15,18]
             ]     
  
  passed = a.multi(b)==expected
|---------------------
| check passed: true 



|****************************************
| TEST max of matrix  
| TAGS user-function array                         
|************************  
  origin = [
              [12,05,06],
              [42,33,12],
              [01,15,18]
             ] 

  res = origin.reduce((acc,cur) -> max(acc, cur.reduce(max)))
|---------------------
| check res: 42 



|****************************************
| TEST max of matrix with functions  
| TAGS user-function array                         
|************************  
  maxOfArray(t) = t.reduce(max)
  maxInRows(t) = t.map(maxOfArray)

  origin = [
              [12,05,06],
              [42,33,12],
              [01,15,18]
             ] 

  res = origin.maxInRows().maxOfArray()

|---------------------
| check res: 42 





|****************************************
| TEST max of cube matrix with functions  
| TAGS user-function array                         
|************************  
  
  arrMax(t) = t.reduce(max)

  arr2Max(t) = t.map(arrMax).arrMax()

  arr3Max(t) = t.map(arr2Max).arrMax()


  origin =[
             [
              [12,05,06],
              [42,-2,12],
              [01,15,18]
             ],
             [
              [12,05,06],
              [42,-1,68],
              [01,15,18]
             ],
             [
              [0,05,100],
              [42,33,12],
              [0,15,0]
             ]
          ] 

  res = origin.arr3Max()

|---------------------
| check res: 100 




|****************************************
| TEST max of cube matrix with generic functions  
| TAGS user-function array                         
|************************  
  
  maxOfArray(t)=t->t.reduce(max)

  maxOf(t) = t.reduce(l->l.reduce(maxOfArray))


  origin =[
             [
              [12,05,06],
              [42,-2,12],
              [01,15,18]
             ],
             [
              [12,05,06],
              [42,-1,68],
              [01,15,18]
             ],
             [
              [0,05,100],
              [42,33,12],
              [0,15,0]
             ]
          ] 

  res = origin.maxOf()
|---------------------
| check res: 100 
